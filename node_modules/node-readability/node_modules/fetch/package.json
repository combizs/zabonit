{
  "name": "fetch",
  "description": "Fetch URL contents",
  "version": "0.3.1",
  "author": {
    "name": "Andris Reinman"
  },
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@node.ee"
    }
  ],
  "homepage": "http://github.com/andris9/fetch",
  "repository": {
    "type": "git",
    "url": "git://github.com/andris9/fetch.git"
  },
  "main": "./lib/fetch",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/andris9/fetch/blob/master/LICENSE"
    }
  ],
  "dependencies": {
    "encoding": "*"
  },
  "engines": [
    "node >=0.5.10"
  ],
  "keywords": [
    "url"
  ],
  "readme": "# fetch\n\nFetch url contents. Supports gzipped content for quicker download, redirects (with automatic cookie handling, so no eternal redirect loops), streaming and piping etc.\n\n## Install\n\n    npm install fetch\n\n## Usage\n\nSee examples folder for a complete example\n\n## Fetch from URL\n\n`fetch.fetchUrl(url [, options], callback)`\n\nWhere\n\n  * **url** is the url to fetch\n  * **options** is an optional options object\n  * **callback** is the callback to run - `callback(error, meta, body)`\n\nExample\n\n    var fetchUrl = require(\"fetch\").fetchUrl;\n\n    // source file is iso-8859-15 but it is converted to utf-8 automatically\n    fetchUrl(\"http://kreata.ee/iso-8859-15.php\", function(error, meta, body){\n        console.log(body.toString());\n    });\n\n**NB** If the file has been marked with charset other than utf-8, it is converted automatically.\n\nBy default `iconv-lite` is used for charset conversion. If you want to use `node-iconv` module instead,\nadd `\"iconv\": \"*\"` to your package.json file, it will be picked up by `fetch` automatically.\n\n## Streaming\n\n`fetch.FetchStream(url [, options]) -> Stream`\n\nWhere\n\n  * **url** is the url to fetch\n  * **options** is an optional options object\n\nWith events:\n\n  * **data** with a data chunk - `function(chunk){}`\n  * **meta** with some information about the response `function(meta){}`\n  * **end** when the receiving is ready\n  * **error**\n\nExample\n\n    var FetchStream = require(\"fetch\").FetchStream;\n\n    var fetch = new FetchStream(\"http://google.com\");\n\n    fetch.on(\"data\", function(chunk){\n        console.log(chunk);\n    });\n\n## Options\n\nPossible option values\n\n * **maxRedirects** how many redirects allowed, defaults to 10\n * **disableRedirects** set to true if redirects are not allowed, defaults to false\n * **headers** optional header fields, in the form of `{'Header-Field':'value'}`\n * **maxResponseLength** maximum allowd length for the file, the remainder is cut off. Defaults to `Infinity`\n * **method** defaults to GET\n * **payload** request body\n * **disableGzip** set to false, to disable content gzipping, needed for Node v0.5.9 which has buggy zlib\n * **cookies** an array of cookie definitions in the form of `['name=val']`\n * **cookieJar** for sharing cookies between requests, see below\n * **outputEncoding** valid for `fetchUrl`\n * **disableDecoding** valid for `fetchUrl`, set to true to disable automatic charset decoding to utf-8\n * **overrideCharset** valid for `fetchUrl`, set input encoding\n * **asyncDnsLoookup** use high performance asyncronous DNS resolution based on c-ares instead of a thread pool calling getaddrinfo(3)\n * **timeout** set a timeout in ms\n * **agent** pass-through http.request agent parameter\n\n\n## Meta object\n\nMeta object contains following fields:\n\n  * **status** HTTP status code\n  * **responseHeaders** response headers\n  * **finalUrl** last url value, useful with redirects\n  * **redirectCount** how many redirects happened\n  * **cookieJar** CookieJar object for sharing/retrieving cookies\n\n## Headers\n\nRequest headers can be set with `options.headers`\n\n    options = {\n        headers:{\n            \"X-My-Header\": \"This is a custom header field\"\n        }\n    }\n\n## User-Agent\nUser-Agent value can be set with `options.headers['User-Agent']` value. Defaults to `\"FetchStream\"`\n\n    options = {\n        headers: {\n            \"User-Agent\": \"MyUseragent/1.0\"\n        }\n    }\n\n## Cookies\nCookies can be set with `options.cookies` which takes an array with cookie definitions\n\n    options = {\n        cookie: [\"name=value\", \"key=value; path=/; secure\"]\n    }\n\nPaths, domain, expire and other cookie settings are honored, so try not to set cookies with expire dates in the past. If domain is not set, any domain will pass, same for paths.\n\n**NB** Do not set cookie field directly in request header as it will be overwritten.\n\n## Cookie sharing\n\nCookies can be shared between different requests, this can be achieved with `CookieJar`\n\n    var fetch = require(\"fetch\");\n\n    var cookies = new fetch.CookieJar();\n\n    // add one cookie for testing\n    cookies.setCookie('alfa=beta; path=/;');\n\n    // create a FetchStream with custom CookieJar\n    var f = fetch.FetchStream(\"http://www.example.com/page1\",{cookieJar: cookies});\n\n    f.on(\"end\", function(){\n        // if cookies were set with the previos request, the data is\n        // saved in 'cookieJar' and passed to the next request\n        fetch.FetchStream(\"http://www.example.com/page1\",{cookieJar: cookies});\n    });\n\n\n## Redirects\n\nRedirects are on by default, use `options.disableRedirects` to disable. Maximum redirect count can be set with `options.maxRedirects` (defaults to 10)\n\n    options = {\n        disableRedirects: true\n    }\n\n    options = {\n        maxRedirects: 100\n    }\n\n## Disable Gzip support\n\nGzip and Deflate support is automatically on. This is problematic in Node v0.5.9 and below since Zlib support on these versions is buggy with unpacking and tends to yield in error.\n\n    options = {\n        disableGzip: true\n    }\n\n## Piping to file\n\n`FetchStream` is a readable Stream object and thus can be piped. For example stream URL contents directly to a file:\n\n    var FetchStream = require(\"fetch\").FetchStream,\n        fs = require(\"fs\"),\n        out;\n\n    out = fs.createWriteStream('file.html');\n    new FetchStream(\"http://www.example.com/index.php\").pipe(out);\n\n## License\n\nBSD",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andris9/fetch/issues"
  },
  "_id": "fetch@0.3.1",
  "dist": {
    "shasum": "a726c32054d5a72897f3f7521d4c8d782852c2b0"
  },
  "_from": "fetch@0.3.x",
  "_resolved": "https://registry.npmjs.org/fetch/-/fetch-0.3.1.tgz"
}
